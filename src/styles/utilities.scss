@each $color, $value in $theme-colors {
  @include bg-variant(".bg-#{$color}", $value);
}

@each $color, $value in $theme-colors {
  @include text-variant(".text-#{$color}", $value);
}

$utilities: (
  // Margin utilities
        "margin": (
                responsive: true,
                property: margin,
                class: m,
                values: map-merge($spacers, (auto: auto))
        ),
        "margin-x": (
                responsive: true,
                property: margin-right margin-left,
                class: mx,
                values: map-merge($spacers, (auto: auto))
        ),
        "margin-y": (
                responsive: true,
                property: margin-top margin-bottom,
                class: my,
                values: map-merge($spacers, (auto: auto))
        ),
        "margin-top": (
                responsive: true,
                property: margin-top,
                class: mt,
                values: map-merge($spacers, (auto: auto))
        ),
        "margin-right": (
                responsive: true,
                property: margin-right,
                class: mr,
                values: map-merge($spacers, (auto: auto))
        ),
        "margin-bottom": (
                responsive: true,
                property: margin-bottom,
                class: mb,
                values: map-merge($spacers, (auto: auto))
        ),
        "margin-left": (
                responsive: true,
                property: margin-left,
                class: ml,
                values: map-merge($spacers, (auto: auto))
        ),
  // Padding utilities
        "padding": (
                responsive: true,
                property: padding,
                class: p,
                values: $spacers
        ),
        "padding-x": (
                responsive: true,
                property: padding-right padding-left,
                class: px,
                values: $spacers
        ),
        "padding-y": (
                responsive: true,
                property: padding-top padding-bottom,
                class: py,
                values: $spacers
        ),
        "padding-top": (
                responsive: true,
                property: padding-top,
                class: pt,
                values: $spacers
        ),
        "padding-right": (
                responsive: true,
                property: padding-right,
                class: pr,
                values: $spacers
        ),
        "padding-bottom": (
                responsive: true,
                property: padding-bottom,
                class: pb,
                values: $spacers
        ),
        "padding-left": (
                responsive: true,
                property: padding-left,
                class: pl,
                values: $spacers
        ),
);

@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

@each $breakpoint in map-keys($grid-breakpoints) {

  // Generate media query if needed
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    // Loop over each utility property
    @each $key, $utility in $utilities {
      // The utility can be disabled with `false`, thus check if the utility is a map first
      // Only proceed if responsive media queries are enabled or if it's the base media query
      @if type-of($utility) == "map" and (map-get($utility, responsive) or $infix == "") {
        @include generate-utility($utility, $infix);
      }
    }
  }
}